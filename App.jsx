/*
  ูุดุฑูุน "ุฌุฏูู ุงููุญุงุถุฑุงุช" - ููู React ูุงุญุฏ (App.jsx)
  - ุงููุงุฌูุฉ ุจุงูุนุฑุจูุฉ (RTL)
  - ุจูุงูุงุช ุงูุชุฑุงุถูุฉ: ูุงุฑุบุฉ (ุงููุทููุจ ููู ุชุนุจุฆุชูุง ูู ููุญุฉ ุงูุฅุฏุงุฑุฉ)
  - ุตูุญุฉ ุนุฑุถ ููุทูุจุฉ + ููุญุฉ ุฅุฏุงุฑุฉ ูุญููุฉ ุจูููุฉ ุงููุฑูุฑ: khaled181
  - ุณุงุนุงุช: 8 ุต โ 10 ู (ูู ุณุงุนุฉ)
  - ูุจุฏุฃ ุงูุฃุณุจูุน ูู ุงูุณุจุช โ ุงูุฎููุณ

  ุชุนูููุงุช ุณุฑูุนุฉ ูุชุดุบูู ุงููุดุฑูุน (ูุฑููุฉ ููุง ูุชุณูู ุนููู):
  1) ุฃูุดุฆ ูุดุฑูุน Vite React + Tailwind (ุฃูุตุฑ ุทุฑููุฉ):
     npm create vite@latest jadwal -- --template react
     cd jadwal
     npm install
     ุงุชุจุน ุชุนูููุงุช Tailwind: https://tailwindcss.com/docs/guides/vite
  2) ุงูุณุฎ ูุญุชูู ูุฐุง ุงูููู ูู src/App.jsx
  3) ุงุณุชุจุฏู src/main.jsx ููุนูู ูุน Tailwind ูApp.jsx (ุงูุชุฑุงุถู ูุน Vite)
  4) ุชุดุบูู ูุญููุงู: npm run dev
  5) ููุฑูุน ุนูู GitHub Pages:
     - ุฃูุดุฆ repo ุนูู GitHub ุซู ูููุฐ build: npm run build
     - ุงุณุชุฎุฏู gh-pages ุฃู GitHub Actions ููุดุฑ ูุฌูุฏ dist ุฅูู gh-pages branch
     (ููุงุญุธุฉ: ุณุฃูุฏู ุจุฎุทูุงุช ุฏูููุฉ ููุฑูุน ูู ุญุจูุช)

  ููุงุญุธุฉ ุฃูุงู: ูููุฉ ุงููุฑูุฑ ูุฎุฒูุฉ ุฏุงุฎู ุงูููุฏ (js) ูุฃู ุงููุดุฑูุน ุจุณูุท ููุณุชุถูู ุนูู GitHub Pages.
  ูู ุงุญุชุฌุช ุฃุฑูุนูุง ููุณุฎุฉ ุฃูุซุฑ ุฃูุงููุง ูุงุญููุง ููุฏุฑ ูุณุชุฎุฏู Firebase Auth ุฃู ุณุฑู ุฎุงุฑุฌู.
*/

import React, { useEffect, useState } from 'react';

// ุฅุนุฏุงุฏุงุช ุฃุณุงุณูุฉ
const ADMIN_PASSWORD = 'khaled181';
const STORAGE_KEY = 'jadwal_data_v1';
const DAYS = ['ุงูุณุจุช','ุงูุฃุญุฏ','ุงูุงุซููู','ุงูุซูุงุซุงุก','ุงูุฃุฑุจุนุงุก','ุงูุฎููุณ'];
const HOURS = Array.from({length:15},(_,i)=>8+i); // 8..22 -> 8..22 (15 ุณุงุนุฉ)

// ููููุงุช ูุณุงุนุฏุฉ
function Header({onOpenAdmin, upcoming}){
  return (
    <header className="w-full bg-gradient-to-l from-sky-400 via-violet-500 to-indigo-600 text-white p-4 rounded-b-2xl shadow-md">
      <div className="container mx-auto flex items-center justify-between">
        <div className="flex items-center gap-3 rtl">
          <div className="text-3xl">๐</div>
          <div>
            <h1 className="text-2xl font-bold">ุฌุฏูู ุงููุญุงุถุฑุงุช</h1>
            <div className="text-sm opacity-90">ุนุฑุถ ุฌุฏูู ุงููุญุงุถุฑุงุช ุจุชูุณูู ุดุจุงุจู ูุณูู</div>
          </div>
        </div>
        <div className="text-right">
          {upcoming ? (
            <div className="text-sm bg-white/20 p-2 rounded-md">ุงููุญุงุถุฑุฉ ุงููุงุฏูุฉ: <strong>{upcoming}</strong></div>
          ) : (
            <div className="text-sm bg-white/10 p-2 rounded-md">ูุง ุชูุฌุฏ ูุญุงุถุฑุงุช ูุฑูุจุฉ</div>
          )}
          <button onClick={onOpenAdmin} className="mt-2 bg-white text-indigo-700 px-3 py-1 rounded-md font-medium">ููุญุฉ ุงูุฅุฏุงุฑุฉ</button>
        </div>
      </div>
    </header>
  );
}

function Nav({view,setView}){
  return (
    <nav className="container mx-auto my-4 flex gap-2 rtl">
      <button onClick={()=>setView('home')} className={`px-3 py-2 rounded-md ${view==='home'?'bg-indigo-500 text-white':'bg-gray-100'}`}>ุงูุฑุฆูุณูุฉ</button>
      <button onClick={()=>setView('schedule')} className={`px-3 py-2 rounded-md ${view==='schedule'?'bg-indigo-500 text-white':'bg-gray-100'}`}>ุงูุฌุฏูู</button>
      <button onClick={()=>setView('instructors')} className={`px-3 py-2 rounded-md ${view==='instructors'?'bg-indigo-500 text-white':'bg-gray-100'}`}>ุงูุฏูุงุชุฑุฉ</button>
    </nav>
  );
}

function Home({lectures}){
  return (
    <div className="container mx-auto p-4 rtl">
      <h2 className="text-xl font-semibold mb-3">ุฃููุง ุจู</h2>
      <p className="mb-3">ูุฐุง ุงููููุน ูุนุฑุถ ุฌุฏูู ุงููุญุงุถุฑุงุช. ุชูุฏุฑ ุชุฏุฎู ููุญุฉ ุงูุฅุฏุงุฑุฉ ูุฅุถุงูุฉ ูุญุงุถุฑุงุช ูุฏูุงุชุฑุฉ. ุงูุทูุจุฉ ูุดูููุง ุงูุฌุฏูู ุจุณ.</p>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <div className="p-4 bg-white rounded shadow">ูุฌููุน ุงููุญุงุถุฑุงุช: <strong>{lectures.length}</strong></div>
        <div className="p-4 bg-white rounded shadow">ุฃูุงู: <strong>ุงูุณุจุช - ุงูุฎููุณ</strong></div>
        <div className="p-4 bg-white rounded shadow">ุณุงุนุงุช: <strong>8:00 ุต - 10:00 ู</strong></div>
      </div>
    </div>
  );
}

function Schedule({lectures, instructors}){
  // ูุนุฑุถ ุงูุจุทุงูุงุช ูุตูููุฉ ุจุญุณุจ ุงูุฃูุงู ูุงูุณุงุนุงุช
  const byDay = {};
  DAYS.forEach(d=> byDay[d]=[]);
  lectures.forEach(l => {
    if(byDay[l.day]) byDay[l.day].push(l);
  });

  return (
    <div className="container mx-auto p-4 rtl">
      <h2 className="text-xl font-semibold mb-4">ุงูุฌุฏูู ุงูุฃุณุจูุนู</h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {DAYS.map(day=> (
          <div key={day} className="bg-white rounded shadow p-3">
            <h3 className="font-bold mb-2">{day}</h3>
            <div className="space-y-2">
              {HOURS.map(hr=>{
                const item = byDay[day].find(x=> +x.hour === +hr);
                if(!item) return (
                  <div key={day+hr} className="p-2 border rounded text-sm opacity-60">{hr}:00 โ ูุงุฑุบ</div>
                );
                const inst = instructors.find(i=>i.id===item.instructorId);
                return (
                  <div key={item.id} className="p-2 border rounded bg-gradient-to-r from-white to-slate-50">
                    <div className="flex justify-between items-start gap-2">
                      <div className="flex-1">
                        <div className="font-semibold">{item.title}</div>
                        <div className="text-sm">{inst?inst.name:'ุฏูุชูุฑ'} โข {item.location || 'ุบูุฑ ูุญุฏุฏ'}</div>
                        {item.notes && <div className="text-xs mt-1">ููุงุญุธุฉ: {item.notes}</div>}
                      </div>
                      <div className="text-sm text-right">
                        <div>{hr}:00</div>
                        {item.link && <a href={item.link} target="_blank" rel="noreferrer" className="mt-1 inline-block text-indigo-600 underline">ุฑุงุจุท ุงููุญุงุถุฑุฉ</a>}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

function Instructors({instructors}){
  return (
    <div className="container mx-auto p-4 rtl">
      <h2 className="text-xl font-semibold mb-4">ุงูุฏูุงุชุฑุฉ</h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {instructors.length===0 && <div className="p-4 bg-white rounded shadow">ูุง ููุฌุฏ ุฏูุงุชุฑุฉ ุญุชู ุงูุขู</div>}
        {instructors.map(i=> (
          <div key={i.id} className="bg-white rounded shadow p-4 text-right">
            <div className="font-bold text-lg">{i.name}</div>
            <div className="text-sm opacity-80">{i.title || ''}</div>
            {i.bio && <p className="mt-2 text-sm">{i.bio}</p>}
            <div className="mt-2 text-xs">ุงูููุงุฏ: {i.subjects?i.subjects.join(', '):'โ'}</div>
          </div>
        ))}
      </div>
    </div>
  );
}

function AdminPanel({onSave, data, setData, onLogout}){
  const [tab, setTab] = useState('lectures');
  // ููุฑู ุฅุถุงูุฉ ูุญุงุถุฑุฉ
  const emptyLecture = {id:Date.now(), day: DAYS[0], hour:8, title:'', instructorId:null, location:'', link:'', notes:''};
  const [lectureForm, setLectureForm] = useState(emptyLecture);
  const emptyInstructor = {id:Date.now(), name:'', title:'', bio:'', subjects:[]};
  const [instrForm, setInstrForm] = useState(emptyInstructor);

  function addLecture(e){
    e.preventDefault();
    setData(prev=>({ ...prev, lectures: [...prev.lectures, lectureForm] }));
    setLectureForm({...emptyLecture, id:Date.now()});
  }
  function addInstructor(e){
    e.preventDefault();
    setData(prev=>({ ...prev, instructors: [...prev.instructors, instrForm] }));
    setInstrForm({...emptyInstructor, id:Date.now()});
  }

  function saveAll(){
    onSave(data);
    alert('ุชู ุงูุญูุธ ุจูุฌุงุญ');
  }

  return (
    <div className="container mx-auto p-4 rtl">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">ููุญุฉ ุงูุฅุฏุงุฑุฉ</h2>
        <div>
          <button onClick={saveAll} className="ml-2 bg-green-500 text-white px-3 py-1 rounded">ุญูุธ</button>
          <button onClick={onLogout} className="bg-red-500 text-white px-3 py-1 rounded">ุฎุฑูุฌ</button>
        </div>
      </div>

      <div className="flex gap-2 mb-4 rtl">
        <button onClick={()=>setTab('lectures')} className={`px-3 py-2 rounded ${tab==='lectures'?'bg-indigo-500 text-white':'bg-gray-100'}`}>ุงููุญุงุถุฑุงุช</button>
        <button onClick={()=>setTab('instructors')} className={`px-3 py-2 rounded ${tab==='instructors'?'bg-indigo-500 text-white':'bg-gray-100'}`}>ุงูุฏูุงุชุฑุฉ</button>
      </div>

      {tab==='lectures' && (
        <div className="bg-white rounded shadow p-4">
          <h3 className="font-bold mb-2">ุฅุถุงูุฉ ูุญุงุถุฑุฉ</h3>
          <form onSubmit={addLecture} className="grid grid-cols-1 md:grid-cols-2 gap-2">
            <select required value={lectureForm.day} onChange={e=>setLectureForm({...lectureForm, day:e.target.value})} className="p-2 border rounded">
              {DAYS.map(d=> <option key={d} value={d}>{d}</option>)}
            </select>
            <select required value={lectureForm.hour} onChange={e=>setLectureForm({...lectureForm, hour:+e.target.value})} className="p-2 border rounded">
              {HOURS.map(h=> <option key={h} value={h}>{h}:00</option>)}
            </select>
            <input required placeholder="ุงุณู ุงููุงุฏุฉ" value={lectureForm.title} onChange={e=>setLectureForm({...lectureForm, title:e.target.value})} className="p-2 border rounded"/>
            <select value={lectureForm.instructorId || ''} onChange={e=>setLectureForm({...lectureForm, instructorId: e.target.value || null})} className="p-2 border rounded">
              <option value="">ุงุฎุชุฑ ุฏูุชูุฑ (ุงุฎุชูุงุฑู)</option>
              {data.instructors.map(i=> <option key={i.id} value={i.id}>{i.name}</option>)}
            </select>
            <input placeholder="ุงูููุงู (ูุงุนุฉ)" value={lectureForm.location} onChange={e=>setLectureForm({...lectureForm, location:e.target.value})} className="p-2 border rounded"/>
            <input placeholder="ุฑุงุจุท ุงููุญุงุถุฑุฉ (ูููู)" value={lectureForm.link} onChange={e=>setLectureForm({...lectureForm, link:e.target.value})} className="p-2 border rounded"/>
            <textarea placeholder="ููุงุญุธุงุช" value={lectureForm.notes} onChange={e=>setLectureForm({...lectureForm, notes:e.target.value})} className="p-2 border rounded col-span-1 md:col-span-2" />
            <button type="submit" className="bg-indigo-600 text-white px-3 py-2 rounded">ุฃุถู ุงููุญุงุถุฑุฉ</button>
          </form>

          <div className="mt-4">
            <h4 className="font-semibold mb-2">ูุงุฆูุฉ ุงููุญุงุถุฑุงุช ุงูุญุงููุฉ</h4>
            {data.lectures.length===0 && <div className="p-2">ูุง ุชูุฌุฏ ูุญุงุถุฑุงุช ุจุนุฏ</div>}
            <ul className="space-y-2">
              {data.lectures.map(l=> (
                <li key={l.id} className="p-2 border rounded flex justify-between items-center">
                  <div className="text-sm">{l.title} โ {l.day} {l.hour}:00</div>
                  <div>
                    <button onClick={()=>{
                      if(confirm('ุญุฐู ุงููุญุงุถุฑุฉุ')){
                        setData(prev=> ({...prev, lectures: prev.lectures.filter(x=>x.id!==l.id)}));
                      }
                    }} className="text-sm text-red-600">ุญุฐู</button>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}

      {tab==='instructors' && (
        <div className="bg-white rounded shadow p-4">
          <h3 className="font-bold mb-2">ุฅุถุงูุฉ ุฏูุชูุฑ</h3>
          <form onSubmit={addInstructor} className="grid grid-cols-1 md:grid-cols-2 gap-2">
            <input required placeholder="ุงุณู ุงูุฏูุชูุฑ" value={instrForm.name} onChange={e=>setInstrForm({...instrForm, name:e.target.value})} className="p-2 border rounded"/>
            <input placeholder="ุงูุชุฎุตุต/ุงููุณูู" value={instrForm.title} onChange={e=>setInstrForm({...instrForm, title:e.target.value})} className="p-2 border rounded"/>
            <input placeholder="ุงูููุงุฏ (ุงูุตู ุจูู ูู ูุงุฏุฉ ุจูุงุตูุฉ)" value={instrForm.subjects.join(', ')} onChange={e=>setInstrForm({...instrForm, subjects: e.target.value.split(',').map(s=>s.trim()).filter(Boolean)})} className="p-2 border rounded"/>
            <textarea placeholder="ูุจุฐุฉ ุนู ุงูุฏูุชูุฑ" value={instrForm.bio} onChange={e=>setInstrForm({...instrForm, bio:e.target.value})} className="p-2 border rounded col-span-1 md:col-span-2" />
            <button type="submit" className="bg-indigo-600 text-white px-3 py-2 rounded">ุฃุถู ุงูุฏูุชูุฑ</button>
          </form>

          <div className="mt-4">
            <h4 className="font-semibold mb-2">ูุงุฆูุฉ ุงูุฏูุงุชุฑุฉ</h4>
            {data.instructors.length===0 && <div className="p-2">ูุง ููุฌุฏ ุฏูุงุชุฑุฉ ุจุนุฏ</div>}
            <ul className="space-y-2">
              {data.instructors.map(i=> (
                <li key={i.id} className="p-2 border rounded flex justify-between items-center">
                  <div className="text-sm">{i.name} โ {i.title}</div>
                  <div>
                    <button onClick={()=>{
                      if(confirm('ุญุฐู ุงูุฏูุชูุฑุ')){
                        setData(prev=> ({...prev, instructors: prev.instructors.filter(x=>x.id!==i.id)}));
                      }
                    }} className="text-sm text-red-600">ุญุฐู</button>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}
    </div>
  );
}

export default function App(){
  const [view,setView] = useState('home');
  const [showAdminLogin,setShowAdminLogin] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);
  const [data, setData] = useState({ lectures: [], instructors: [] });

  // ุชุญููู ูู localStorage ุนูุฏ ุงูุจุฏุงูุฉ
  useEffect(()=>{
    const raw = localStorage.getItem(STORAGE_KEY);
    if(raw){
      try{ setData(JSON.parse(raw)); }catch(e){ console.error(e); }
    }
  },[]);
  // ุญูุธ ุชููุงุฆู ุนูุฏ ุชุบูุฑ ุงูุจูุงูุงุช
  useEffect(()=>{
    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
  },[data]);

  function openAdmin(){ setShowAdminLogin(true); }
  function handleLogin(pw){
    if(pw===ADMIN_PASSWORD){ setIsAdmin(true); setShowAdminLogin(false); setView('schedule'); }
    else alert('ูููุฉ ุงููุฑูุฑ ุฎุงุทุฆุฉ');
  }
  function handleLogout(){ setIsAdmin(false); setView('home'); }

  function saveData(obj){
    setData(obj);
    // already saved by effect
  }

  // ุจุญุซ ุนู ุฃูุฑุจ ูุญุงุถุฑุฉ ูุงุฏูุฉ (ุจุณูุท)
  const upcomingText = (()=>{
    const now = new Date();
    // ูุญุงูู ุฅูุฌุงุฏ ุฃู ูุญุงุถุฑุฉ ุจููุณ ุงูููู ูุงูุณุงุนุฉ >= ุงูุขู
    const dayIndex = (now.getDay()+1)%7; // ุชุญููู: ุงูุณุจุช index 0 => tricky; ูุชุจุณูุท ุณูุจุญุซ ุจุจุณุงุทุฉ ูู ุฌููุน
    if(data.lectures.length===0) return null;
    const next = data.lectures.sort((a,b)=> (a.day+b.hour) > (b.day+b.hour) ? 1:-1)[0];
    if(!next) return null;
    return `${next.title} โ ${next.day} ${next.hour}:00`;
  })();

  return (
    <div className="min-h-screen bg-slate-50 text-slate-800" dir="rtl">
      <Header onOpenAdmin={openAdmin} upcoming={upcomingText} />
      <Nav view={view} setView={setView} />

      {view==='home' && <Home lectures={data.lectures} />}
      {view==='schedule' && <Schedule lectures={data.lectures} instructors={data.instructors} />}
      {view==='instructors' && <Instructors instructors={data.instructors} />}

      {isAdmin && <AdminPanel onSave={saveData} data={data} setData={setData} onLogout={handleLogout} />}

      {/* ูุงูุฐุฉ ุชุณุฌูู ุงูุฏุฎูู ุงูุฅุฏุงุฑูุฉ */}
      {showAdminLogin && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center p-4">
          <div className="bg-white rounded p-4 w-full max-w-md">
            <h3 className="font-bold mb-2">ุฏุฎูู ููุญุฉ ุงูุฅุฏุงุฑุฉ</h3>
            <p className="text-sm mb-2">ุงูุชุจ ูููุฉ ุงููุฑูุฑ ููุฏุฎูู</p>
            <AdminLoginForm onSubmit={handleLogin} onClose={()=>setShowAdminLogin(false)} />
          </div>
        </div>
      )}

      <footer className="mt-8 p-4 text-center text-sm opacity-70">ยฉ ุฌุฏูู ุงููุญุงุถุฑุงุช โ ูุตูู ููุดุจูุฉ ุงูุฌุงูุนูุฉ</footer>
    </div>
  );
}

function AdminLoginForm({onSubmit,onClose}){
  const [pw,setPw] = useState('');
  return (
    <form onSubmit={(e)=>{ e.preventDefault(); onSubmit(pw); }} className="space-y-2">
      <input type="password" placeholder="ูููุฉ ุงููุฑูุฑ" value={pw} onChange={e=>setPw(e.target.value)} className="w-full p-2 border rounded" />
      <div className="flex justify-end gap-2">
        <button type="button" onClick={onClose} className="px-3 py-1 rounded bg-gray-200">ุฅูุบุงุก</button>
        <button type="submit" className="px-3 py-1 rounded bg-indigo-600 text-white">ุฏุฎูู</button>
      </div>
    </form>
  );
}
